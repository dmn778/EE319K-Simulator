


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: Neil Narvekar
    3 00000000         ; Last modification date: 11/10/2019
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000 40004100 
                       DC      EQU              0x40004100
   22 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   23 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   24 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   25 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   26 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   27 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   28 00000000         
   29 00000000                 EXPORT           writecommand
   30 00000000                 EXPORT           writedata
   31 00000000         
   32 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   33 00000000                 THUMB
   34 00000000                 ALIGN
   35 00000000         
   36 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   37 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   38 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat



ARM Macro Assembler    Page 2 


   39 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   40 00000000         ; lot of data, the FIFOs are not used when writing
   41 00000000         ; commands, and they are used when writing data.  This
   42 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   43 00000000         ; that is actually being transmitted.
   44 00000000         ; The write command operation waits until all data has b
                       een
   45 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   46 00000000         ; the command, and then waits for the transmission to
   47 00000000         ; finish.
   48 00000000         ; The write data operation waits until there is room in 
                       the
   49 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   50 00000000         ; and then adds the data to the transmit FIFO.
   51 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   52 00000000         ; the SSI0 module is not initialized and enabled.
   53 00000000         
   54 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   55 00000000         ; Input: R0  8-bit command to transmit
   56 00000000         ; Output: none
   57 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   58 00000000         writecommand
   59 00000000         ;; --UUU-- Code to write a command to the LCD
   60 00000000 B403            PUSH{R0,R1}
   61 00000002         ;1) Read SSI0_SR_R and check bit 4, 
   62 00000002 4812            LDR              R0, =SSI0_SR_R ; pointer
   63 00000004 6801    wcloop  LDR              R1, [R0]    ; data
   64 00000006 F001 0110       AND              R1, R1, #0x10 ; check bit 4
   65 0000000A         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   66 0000000A 2910            CMP              R1, #0x10   ; compare bit 4 to 
                                                            1
   67 0000000C D0FA            BEQ              wcloop      ; if high, loop bac
                                                            k
   68 0000000E         ;3) Clear D/C=PA6 to zero
   69 0000000E 4810            LDR              R0, =DC     ; load PortA pointe
                                                            r
   70 00000010 F021 0140       AND              R1, #~0x40  ; load 0 for PA6
   71 00000014 6001            STR              R1, [R0]    ; store 0 to port P
                                                            A6 point
   72 00000016         ;4) Write the command to SSI0_DR_R
   73 00000016 4A0F            LDR              R2, =SSI0_DR_R ; load pointer
   74 00000018 BC03            POP{R0,R1}                   ; pop R0 for puttin
                                                            g in data
   75 0000001A 7010            STRB             R0, [R2]    ; store R0 to where
                                                             R2 is pointing
   76 0000001C B403            PUSH{R0,R1}
   77 0000001E         
   78 0000001E         ;5) Read SSI0_SR_R and check bit 4, 
   79 0000001E 480B            LDR              R0, =SSI0_SR_R ; pointer
   80 00000020 6801    wcloop2 LDR              R1, [R0]    ; data
   81 00000022 F001 0110       AND              R1, R1, #0x10 ; check bit 4



ARM Macro Assembler    Page 3 


   82 00000026         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   83 00000026 2910            CMP              R1, #0x10   ; compare bit 4 to 
                                                            1
   84 00000028 D0FA            BEQ              wcloop2     ; if not high, loop
                                                             back
   85 0000002A         
   86 0000002A BC03            POP{R0,R1}
   87 0000002C 4770            BX               LR          ;   return
   88 0000002E         
   89 0000002E         
   90 0000002E         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   91 0000002E         ; Input: R0  8-bit data to transmit
   92 0000002E         ; Output: none
   93 0000002E         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   94 0000002E         writedata
   95 0000002E         ;; --UUU-- Code to write data to the LCD
   96 0000002E B403            PUSH{R0,R1}
   97 00000030         ;1) Read SSI0_SR_R and check bit 1, 
   98 00000030 4806    wdloop  LDR              R0, =SSI0_SR_R
   99 00000032 6801            LDR              R1, [R0]    ; check data
  100 00000034 F001 0102       AND              R1, #0x02   ; check bit 1
  101 00000038         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
  102 00000038 2902            CMP              R1, #0x02   ; check if equal (h
                                                            igh)
  103 0000003A D1F9            BNE              wdloop      ; if low, loop back
                                                            
  104 0000003C         ;3) Set D/C=PA6 to one
  105 0000003C 4804            LDR              R0, =DC     ; load PortA pointe
                                                            r
  106 0000003E F041 0140       ORR              R1, #0x40   ; load 1 for PA6
  107 00000042 6001            STR              R1, [R0]    ; store 1 to port P
                                                            A6
  108 00000044         ;4) Write the 8-bit data to SSI0_DR_R
  109 00000044 BC03            POP              {R0,R1}
  110 00000046 4903            LDR              R1, =SSI0_DR_R
  111 00000048 7008            STRB             R0, [R1]
  112 0000004A         
  113 0000004A 4770            BX               LR          ;   return
  114 0000004C         
  115 0000004C         
  116 0000004C         ;***************************************************
  117 0000004C         ; This is a library for the Adafruit 1.8" SPI display.
  118 0000004C         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  119 0000004C         ; ----> http://www.adafruit.com/products/358
  120 0000004C         ; as well as Adafruit raw 1.8" TFT display
  121 0000004C         ; ----> http://www.adafruit.com/products/618
  122 0000004C         ;
  123 0000004C         ; Check out the links above for our tutorials and wiring
                        diagrams
  124 0000004C         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  125 0000004C         ; interface (RST is optional)
  126 0000004C         ; Adafruit invests time and resources providing this ope
                       n source code,



ARM Macro Assembler    Page 4 


  127 0000004C         ; please support Adafruit and open-source hardware by pu
                       rchasing
  128 0000004C         ; products from Adafruit!
  129 0000004C         ;
  130 0000004C         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  131 0000004C         ; MIT license, all text above must be included in any re
                       distribution
  132 0000004C         ;****************************************************
  133 0000004C         
  134 0000004C                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  135 0000004C                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\lcd.d -o.\lcd.o -I.\RTE\_Lab8 -IC:\Users\petab\AppData\Local\Arm
\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\petab\AppData\Local\Arm\Pa
cks\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VERSION S
ETA 528" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\
lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 32 in file LCD.s
   Uses
      None
Comment: .text unused
wcloop 00000004

Symbol: wcloop
   Definitions
      At line 63 in file LCD.s
   Uses
      At line 67 in file LCD.s
Comment: wcloop used once
wcloop2 00000020

Symbol: wcloop2
   Definitions
      At line 80 in file LCD.s
   Uses
      At line 84 in file LCD.s
Comment: wcloop2 used once
wdloop 00000030

Symbol: wdloop
   Definitions
      At line 98 in file LCD.s
   Uses
      At line 103 in file LCD.s
Comment: wdloop used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 58 in file LCD.s
   Uses
      At line 29 in file LCD.s
Comment: writecommand used once
writedata 0000002E

Symbol: writedata
   Definitions
      At line 94 in file LCD.s
   Uses
      At line 30 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 21 in file LCD.s
   Uses
      At line 69 in file LCD.s
      At line 105 in file LCD.s

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 22 in file LCD.s
   Uses
      None
Comment: GPIO_PORTA_DATA_R unused
SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 23 in file LCD.s
   Uses
      At line 73 in file LCD.s
      At line 110 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 62 in file LCD.s
      At line 79 in file LCD.s
      At line 98 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 26 in file LCD.s
   Uses
      None
Comment: SSI_SR_BSY unused
SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions
      At line 25 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 27 in file LCD.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: SSI_SR_TNF unused
7 symbols
348 symbols in table
