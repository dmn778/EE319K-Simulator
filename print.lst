


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Neil Narvekar
    3 00000000         ; Last modification date: 11/10/2019
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000 00000000 
                       n       EQU              0
   13 00000000         
   14 00000000                 IMPORT           ST7735_OutChar
   15 00000000                 IMPORT           ST7735_OutString
   16 00000000                 EXPORT           LCD_OutDec
   17 00000000                 EXPORT           LCD_OutFix
   18 00000000         
   19 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   20 00000000                 THUMB
   21 00000000         
   22 00000000         
   23 00000000         
   24 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000000         ; Output a 32-bit number in unsigned decimal format
   26 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000000         ; Output: none
   28 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000000         LCD_OutDec
   30 00000000         ; copy/paste Lab 7 solution here
   31 00000000 F003 0300       AND              R3, #0      ; clear counting re
                                                            gister
   32 00000004 F103 0301       ADD              R3, #1      ; set counting regi
                                                            ster to 1
   33 00000008 B082    ODloop  SUB              SP, #8      ; allocate 
   34 0000000A 9000            STR              R0,[SP,#n]  ; n=R0 number, loca
                                                            l variable
   35 0000000C         
   36 0000000C F04F 020A       MOV              R2, #10
   37 00000010 4290            CMP              R0, R2
   38 00000012 D803            BHI              continue    ; check if absolute
                                                             value of num great
                                                            er than or = to 10
   39 00000014 D002            BEQ              continue    ; check if absolute
                                                             value of num great
                                                            er than or = to 10
   40 00000016 B002            ADD              SP,#8       ; if not, deallocat
                                                            e
   41 00000018 B403            PUSH{R0,R1}                  ; put digit on stac
                                                            k
   42 0000001A E010            B                doneOD
   43 0000001C         
   44 0000001C         ; if number greater or equal to 10, do num %10



ARM Macro Assembler    Page 2 


   45 0000001C FBB0 F1F2 
                       continue
                               UDIV             R1, R0, R2  ; divide by 10
   46 00000020 FB01 F102       MUL              R1, R2      ; multiply by 10, n
                                                            ow last digit is 0 
                                                            (truncated)
   47 00000024 EBA0 0001       SUB              R0, R0, R1  ; subtract original
                                                             from number with l
                                                            ast digit 0 to get 
                                                            n % 10 (ex. 187-180
                                                            =7)
   48 00000028         
   49 00000028 9A00            LDR              R2,[SP,#n]  ; load back origina
                                                            l number to R2 for 
                                                            later
   50 0000002A B002            ADD              SP, #8      ; deallocate
   51 0000002C         
   52 0000002C B403            PUSH{R0,R1}                  ; push digit
   53 0000002E F103 0301       ADD              R3, #1      ; increment digit c
                                                            ounter
   54 00000032         
   55 00000032 4610            MOV              R0, R2      ; move original num
                                                            ber back
   56 00000034 F04F 010A       MOV              R1, #10
   57 00000038 FBB0 F0F1       UDIV             R0, R1      ; divide num by 10 
                                                            for next iteration,
                                                             to find next digit
                                                            
   58 0000003C E7E4            B                ODloop
   59 0000003E         
   60 0000003E         
   61 0000003E         doneOD
   62 0000003E 2B00            CMP              R3, #0
   63 00000040 DD0A            BLE              doneOD2     ; if iterations les
                                                            s than or equal to 
                                                            0, program done
   64 00000042         
   65 00000042 BC03            POP{R0,R1}                   ; else, pop digit o
                                                            ff stack
   66 00000044 F100 0030       ADD              R0, #0x30   ; make ascii
   67 00000048 B508            PUSH{R3,LR}                  ; save registers
   68 0000004A F7FF FFFE       BL               ST7735_OutChar ; output ascii 
   69 0000004E E8BD 4008       POP{R3,LR}                   ;save registers
   70 00000052 F1A3 0301       SUB              R3, #1      ; decrement digit c
                                                            ounter
   71 00000056 E7F2            B                doneOD
   72 00000058         
   73 00000058 4770    doneOD2 BX               LR
   74 0000005A         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   75 0000005A         
   76 0000005A         ; -----------------------LCD _OutFix--------------------
                       --
   77 0000005A         ; Output characters to LCD display in fixed-point format
                       
   78 0000005A         ; unsigned decimal, resolution 0.01, range 0.00 to 9.99
   79 0000005A         ; Inputs:  R0 is an unsigned 32-bit number
   80 0000005A         ; Outputs: none
   81 0000005A         ; E.g., R0=0,    then output "0.00 "
   82 0000005A         ;       R0=3,    then output "0.003 "



ARM Macro Assembler    Page 3 


   83 0000005A         ;       R0=89,   then output "0.89 "
   84 0000005A         ;       R0=123,  then output "1.23 "
   85 0000005A         ;       R0=999,  then output "9.99 "
   86 0000005A         ;       R0>999,  then output "*.** "
   87 0000005A         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   88 0000005A         LCD_OutFix
   89 0000005A         ; copy/paste Lab 7 solution here
   90 0000005A F5B0 7F7A       CMP              R0, #1000
   91 0000005E D847            BHI              onethoucase ; if absolute value
                                                             greater or = to 10
                                                            00, goto special ca
                                                            se
   92 00000060 D046            BEQ              onethoucase ; if absolute value
                                                             greater or = to 10
                                                            00, goto special ca
                                                            se
   93 00000062         
   94 00000062 F003 0300       AND              R3, #0      ; clear counting re
                                                            gister
   95 00000066 F103 0301       ADD              R3, #1      ; counting register
                                                            
   96 0000006A B082    OFloop  SUB              SP, #8      ; allocate 
   97 0000006C 9000            STR              R0,[SP,#n]  ; n=R0 number, loca
                                                            l variable
   98 0000006E         
   99 0000006E F04F 020A       MOV              R2, #10
  100 00000072 4290            CMP              R0, R2
  101 00000074 D803            BHI              contOF      ; check if num grea
                                                            ter than or = to 10
                                                            
  102 00000076 D002            BEQ              contOF      ; check if num grea
                                                            ter than or = to 10
                                                            
  103 00000078         
  104 00000078 B002            ADD              SP,#8       ; if not deallocate
                                                            
  105 0000007A B403            PUSH{R0,R1}                  ; push digit to sta
                                                            ck
  106 0000007C E010            B                doneOF
  107 0000007E         
  108 0000007E         ; if number greater or equal to 10, do num % 10
  109 0000007E FBB0 F1F2 
                       contOF  UDIV             R1, R0, R2  ; divide by 10
  110 00000082 FB01 F102       MUL              R1, R2      ; multiply by 10
  111 00000086 EBA0 0001       SUB              R0, R0, R1  ; subtract original
                                                             from number with l
                                                            ast digit 0 to get 
                                                            n % 10
  112 0000008A 9A00            LDR              R2,[SP,#n]  ; load back origina
                                                            l number to R0 for 
                                                            later
  113 0000008C B002            ADD              SP, #8      ; deallocate
  114 0000008E         
  115 0000008E B403            PUSH{R0,R1}                  ; push digit
  116 00000090 F103 0301       ADD              R3, #1      ; counter
  117 00000094         
  118 00000094 4610            MOV              R0, R2      ; move back
  119 00000096 F04F 010A       MOV              R1, #10



ARM Macro Assembler    Page 4 


  120 0000009A FBB0 F0F1       UDIV             R0, R1      ; divide num by 10 
                                                            for next iteration
  121 0000009E E7E4            B                OFloop
  122 000000A0         
  123 000000A0         
  124 000000A0         
  125 000000A0 2B01    doneOF  CMP              R3, #1
  126 000000A2 D002            BEQ              onedig      ; if 1 digit, go sp
                                                            ecial case
  127 000000A4 2B02            CMP              R3, #2
  128 000000A6 D007            BEQ              twodig      ; if 2 digit, go sp
                                                            ecial case
  129 000000A8 E00C            B                threedig    ; else, goto three 
                                                            digit
  130 000000AA         
  131 000000AA         onedig                               ; if one dig, push 
                                                            two zeros
  132 000000AA F04F 0000       MOV              R0, #0x00
  133 000000AE B403            PUSH{R0,R1}
  134 000000B0 B403            PUSH{R0,R1}                  ; push two zeros
  135 000000B2 F103 0302       ADD              R3, #2      ;set counter to 3
  136 000000B6 E005            B                threedig
  137 000000B8         
  138 000000B8         twodig                               ; if two dig, push 
                                                            1 zero
  139 000000B8 F04F 0000       MOV              R0, #0x00
  140 000000BC B403            PUSH{R0,R1}
  141 000000BE F103 0301       ADD              R3, #1      ; set counter to 3
  142 000000C2 E7FF            B                threedig
  143 000000C4         
  144 000000C4 2B00    threedig
                               CMP              R3, #0
  145 000000C6 DD27            BLE              doneOF2     ; if iterations les
                                                            s than or equal to 
                                                            zero, program done
  146 000000C8         
  147 000000C8 BC03    outnum  POP{R0,R1}                   ; pop digit
  148 000000CA F100 0030       ADD              R0, #0x30   ; get ascii
  149 000000CE B508            PUSH{R3,LR}                  ;save registers
  150 000000D0 F7FF FFFE       BL               ST7735_OutChar ; output
  151 000000D4 E8BD 4008       POP{R3,LR}                   ; save registers
  152 000000D8         
  153 000000D8 2B03            CMP              R3, #3      ; check if three di
                                                            gits
  154 000000DA D106            BNE              skipdot     ; if not, skip putt
                                                            ing a dot
  155 000000DC F04F 002E       MOV              R0, #0x2E
  156 000000E0 B508            PUSH{R3,LR}                  ; save registers
  157 000000E2 F7FF FFFE       BL               ST7735_OutChar ; output
  158 000000E6 E8BD 4008       POP{R3,LR}                   ;save registers
  159 000000EA F1A3 0301 
                       skipdot SUB              R3, #1      ; decrement counter
                                                             for digits
  160 000000EE E7E9            B                threedig
  161 000000F0         
  162 000000F0         onethoucase                          ; if 1000 or greate
                                                            r, output *.**
  163 000000F0 B501            PUSH{R0,LR}
  164 000000F2 F04F 002A       MOV              R0, #0x2A



ARM Macro Assembler    Page 5 


  165 000000F6 F7FF FFFE       BL               ST7735_OutChar
  166 000000FA F04F 002E       MOV              R0, #0x2E
  167 000000FE F7FF FFFE       BL               ST7735_OutChar
  168 00000102 F04F 002A       MOV              R0, #0x2A
  169 00000106 F7FF FFFE       BL               ST7735_OutChar
  170 0000010A F04F 002A       MOV              R0, #0x2A
  171 0000010E F7FF FFFE       BL               ST7735_OutChar
  172 00000112 E8BD 4001       POP{R0,LR}
  173 00000116 E7FF            B                doneOF2
  174 00000118         
  175 00000118 4770    doneOF2 BX               LR
  176 0000011A         
  177 0000011A         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  178 0000011A         
  179 0000011A 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  180 0000011C                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\print.d -o.\print.o -I.\RTE\_Lab8 -IC:\Users\petab\AppData\Local
\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\petab\AppData\Local\Ar
m\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__UVISION_VERSI
ON SETA 528" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --lis
t=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 19 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 29 in file Print.s
   Uses
      At line 16 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 0000005A

Symbol: LCD_OutFix
   Definitions
      At line 88 in file Print.s
   Uses
      At line 17 in file Print.s
Comment: LCD_OutFix used once
ODloop 00000008

Symbol: ODloop
   Definitions
      At line 33 in file Print.s
   Uses
      At line 58 in file Print.s
Comment: ODloop used once
OFloop 0000006A

Symbol: OFloop
   Definitions
      At line 96 in file Print.s
   Uses
      At line 121 in file Print.s
Comment: OFloop used once
contOF 0000007E

Symbol: contOF
   Definitions
      At line 109 in file Print.s
   Uses
      At line 101 in file Print.s
      At line 102 in file Print.s

continue 0000001C

Symbol: continue
   Definitions
      At line 45 in file Print.s
   Uses
      At line 38 in file Print.s
      At line 39 in file Print.s

doneOD 0000003E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: doneOD
   Definitions
      At line 61 in file Print.s
   Uses
      At line 42 in file Print.s
      At line 71 in file Print.s

doneOD2 00000058

Symbol: doneOD2
   Definitions
      At line 73 in file Print.s
   Uses
      At line 63 in file Print.s
Comment: doneOD2 used once
doneOF 000000A0

Symbol: doneOF
   Definitions
      At line 125 in file Print.s
   Uses
      At line 106 in file Print.s
Comment: doneOF used once
doneOF2 00000118

Symbol: doneOF2
   Definitions
      At line 175 in file Print.s
   Uses
      At line 145 in file Print.s
      At line 173 in file Print.s

onedig 000000AA

Symbol: onedig
   Definitions
      At line 131 in file Print.s
   Uses
      At line 126 in file Print.s
Comment: onedig used once
onethoucase 000000F0

Symbol: onethoucase
   Definitions
      At line 162 in file Print.s
   Uses
      At line 91 in file Print.s
      At line 92 in file Print.s

outnum 000000C8

Symbol: outnum
   Definitions
      At line 147 in file Print.s
   Uses
      None
Comment: outnum unused
skipdot 000000EA



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: skipdot
   Definitions
      At line 159 in file Print.s
   Uses
      At line 154 in file Print.s
Comment: skipdot used once
threedig 000000C4

Symbol: threedig
   Definitions
      At line 144 in file Print.s
   Uses
      At line 129 in file Print.s
      At line 136 in file Print.s
      At line 142 in file Print.s
      At line 160 in file Print.s

twodig 000000B8

Symbol: twodig
   Definitions
      At line 138 in file Print.s
   Uses
      At line 128 in file Print.s
Comment: twodig used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

n 00000000

Symbol: n
   Definitions
      At line 12 in file Print.s
   Uses
      At line 34 in file Print.s
      At line 49 in file Print.s
      At line 97 in file Print.s
      At line 112 in file Print.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 14 in file Print.s
   Uses
      At line 68 in file Print.s
      At line 150 in file Print.s
      At line 157 in file Print.s
      At line 165 in file Print.s
      At line 167 in file Print.s
      At line 169 in file Print.s
      At line 171 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 15 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
353 symbols in table
